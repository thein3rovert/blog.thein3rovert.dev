---
import { type CollectionEntry } from "astro:content";
import PageLayout from "@/layouts/Base.astro";
import { getAllPosts } from "@/data/post";
import { collectionDateSort } from "@/utils/date";

const allPosts = await getAllPosts();
const sortedPosts = allPosts.sort(collectionDateSort).reverse(); // Most recent first

// Function to estimate word count from markdown content
function getWordCount(content: string): number {
	// Remove frontmatter, code blocks, and markdown syntax for rough word count
	const cleanContent = content
		.replace(/---[\s\S]*?---/, "") // Remove frontmatter
		.replace(/```[\s\S]*?```/g, "") // Remove code blocks
		.replace(/`[^`]*`/g, "") // Remove inline code
		.replace(/[#*_\[\]()]/g, "") // Remove markdown syntax
		.replace(/!\[.*?\]\(.*?\)/g, "") // Remove images
		.replace(/\[.*?\]\(.*?\)/g, "") // Remove links
		.replace(/\s+/g, " ") // Normalize whitespace
		.trim();

	return cleanContent.split(" ").filter((word) => word.length > 0).length;
}

// Function to read post content and calculate word count
async function getPostWordCount(post: CollectionEntry<"post">): Promise<number> {
	try {
		// Read the actual markdown file content
		const content = post.body || "";
		if (!content) {
			return Math.floor(Math.random() * 800) + 200; // Fallback for empty content
		}
		return getWordCount(content);
	} catch (error) {
		console.warn(`Could not read content for post ${post.id}:`, error);
		return Math.floor(Math.random() * 800) + 200; // Fallback
	}
}

// Function to format date in ls format (MMM DD YYYY)
function formatLsDate(date: Date): string {
	const months = [
		"Jan",
		"Feb",
		"Mar",
		"Apr",
		"May",
		"Jun",
		"Jul",
		"Aug",
		"Sep",
		"Oct",
		"Nov",
		"Dec",
	];
	const month = months[date.getMonth()];
	const day = date.getDate().toString().padStart(2, " ");
	const year = date.getFullYear();
	return `${month} ${day} ${year}`;
}

// Calculate actual word counts and prepare post metadata
const postsWithMetadata = await Promise.all(
	sortedPosts.map(async (post) => {
		const wordCount = await getPostWordCount(post);
		const category = post.data.tags?.[0] || "blog"; // Use first tag as category
		const formattedDate = formatLsDate(new Date(post.data.publishDate));

		return {
			post,
			wordCount,
			category,
			formattedDate,
			title: post.data.title,
		};
	}),
);

// Calculate total words across all posts
const totalWords = postsWithMetadata.reduce((total, postMeta) => total + postMeta.wordCount, 0);

const currentDate = new Date();

// Function to format date in stat format (YYYY-MM-DD HH:MM:SS -0600)
function formatStatDate(date: Date): string {
	const year = date.getFullYear();
	const month = (date.getMonth() + 1).toString().padStart(2, "0");
	const day = date.getDate().toString().padStart(2, "0");
	const hours = date.getHours().toString().padStart(2, "0");
	const minutes = date.getMinutes().toString().padStart(2, "0");
	const seconds = date.getSeconds().toString().padStart(2, "0");
	return `${year}-${month}-${day} ${hours}:${minutes}:${seconds} -0600`;
}

const currentStatDate = formatStatDate(currentDate);
const birthDate = formatStatDate(new Date(Date.now() - 24 * 60 * 60 * 1000)); // 1 day ago for birth

const meta = {
	title: "Terminal",
	description: "Terminal-style file listing of blog posts",
};
---

<PageLayout meta={meta}>
	<div class="space-y-1 font-mono text-sm">
		<!-- File header info -->
		<div class="mb-6 space-y-1">
			<div class="hover:text-accent cursor-pointer">
				<a href="/" class="hover:underline">File: /home/thein3rovert/posts</a>
			</div>
			<div class="text-gray-400">Size: {totalWords} words</div>
			<div class="text-gray-400">
				Access: (0644/-rw-r--r--) Uid: ( 1000/thein3rovert) Gid: ( 100/ users)
			</div>
			<div class="text-gray-400">Modify: {currentStatDate}</div>
			<div class="text-gray-400">Birth: {birthDate}</div>
		</div>
	</div>

	<!-- File listings -->
	<div class="terminal-listing">
		{
			postsWithMetadata.map(({ post, wordCount, category, formattedDate, title }) => (
				<div class="terminal-row font-mono text-sm">
					<span class="col-permissions text-gray-400">-rw-r--r--</span>
					<span class="col-user text-gray-400">thein3rovert</span>
					<span class="col-size text-gray-400">{wordCount}W</span>
					<span class="col-month text-gray-400">{formattedDate.split(" ")[0]}</span>
					<span class="col-day text-gray-400">{formattedDate.split(" ")[1]}</span>
					<span class="col-year text-gray-400">{formattedDate.split(" ")[2]}</span>
					<span class="col-title">
						<span class="text-gray-400">{category}</span>{" "}
						<a href={`/posts/${post.id}`} class="text-accent hover:underline">
							{title}
						</a>
					</span>
				</div>
			))
		}
	</div>
</PageLayout>

<style>
	/* Terminal grid layout */
	.terminal-listing {
		display: flex;
		flex-direction: column;
		gap: 2px;
	}

	.terminal-row {
		display: grid;
		grid-template-columns:
			minmax(80px, auto) /* permissions */
			minmax(90px, auto) /* user */
			minmax(50px, auto) /* size */
			minmax(40px, auto) /* month */
			minmax(30px, auto) /* day */
			minmax(50px, auto) /* year */
			1fr; /* title */
		gap: 8px;
		align-items: baseline;
		font-family: "Courier New", Courier, monospace;
		font-size: 14px;
		line-height: 1.25;
		letter-spacing: 0;
	}

	/* Responsive behavior */
	@media (max-width: 768px) {
		.terminal-row {
			grid-template-columns:
				minmax(80px, auto) /* permissions */
				minmax(70px, auto) /* user */
				minmax(40px, auto) /* size */
				1fr; /* title only */
		}

		/* Hide month, day, year on small screens */
		.col-month,
		.col-day,
		.col-year {
			display: none;
		}
	}

	@media (max-width: 480px) {
		.terminal-row {
			grid-template-columns:
				minmax(80px, auto) /* permissions */
				minmax(40px, auto) /* size */
				1fr; /* title only */
		}

		/* Hide user column on very small screens */
		.col-user {
			display: none;
		}
	}

	/* Column alignment */
	.col-permissions {
		text-align: left;
	}

	.col-user {
		text-align: left;
	}

	.col-size {
		text-align: right;
	}

	.col-month,
	.col-day,
	.col-year {
		text-align: left;
	}

	.col-title {
		text-align: left;
		word-wrap: break-word;
		overflow-wrap: break-word;
	}

	/* Terminal-like styling */
	a {
		color: inherit;
		text-decoration: none;
	}

	a:hover {
		text-decoration: underline;
	}
</style>
