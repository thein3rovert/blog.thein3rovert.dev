---
import type { CollectionEntry } from "astro:content";
// import FormattedDate from "@/components/FormattedDate.astro";
// import type { HTMLTag, Polymorphic } from "astro/types";
import type { IElement } from "@/data/shared";
import { getFormattedDate } from "@/utils/date";
// type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
// 	post: CollectionEntry<"post">;
// 	withDesc?: boolean;
// };

interface Props extends IElement {
	post: CollectionEntry<"post">;
	withDesc?: boolean;
}

const { post, as: Element = "div", withDesc = false } = Astro.props;
const date = new Date(post.data.publishDate);
const datetime = date.toISOString();
const postDate = getFormattedDate(date, { month: "short" });
// const { as: Tag = "div", post, withDesc = false } = Astro.props;
---

<time datetime={datetime} class="min-w-[120px] text-gray-500">{postDate}</time>
<Element>
	<a href={`/posts/${post.id}`} class="style-link" rel="prefetch">
		{post.data.title}
	</a>
</Element>
{withDesc && <q class="mt-2 line-clamp-3 block italic">{post.data.description}</q>}
<!--
<FormattedDate
	class="min-w-30 font-semibold text-gray-600 dark:text-gray-400"
	date={post.data.publishDate}
/>
<Tag>
	{post.data.draft && <span class="text-red-500">(Draft) </span>}
	<a class="cactus-link" data-astro-prefetch href={`/posts/${post.id}/`}>
		{post.data.title}
	</a>
</Tag>
{withDesc && <q class="line-clamp-3 italic">{post.data.description}</q>} -->
